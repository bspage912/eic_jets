// Test of Jet Used with StForwardDijetEvent

#ifndef StEpSimuSubJet_def
#define StEpSimuSubJet_def

#include "TObject.h"
#include "TLorentzVector.h"
#include "TRef.h"
#include "TRefArray.h"

#include "StEpSimuJetParticle.h"
//#include "StForwardTower.h"

class StEpSimuJetEvent;
class StEpSimuJetDef;
class StEpSimuJet;
//class StEpSimuJetParticle;
//class StForwardTower;

class StEpSimuSubJet : public TObject {
 public:
  StEpSimuSubJet()
    : mPt(0)
    , mEta(0)
    , mPhi(0)
    , mE(0)
    {
    }

  StEpSimuSubJet(Double_t pt, Double_t eta, Double_t phi, Double_t energy);

  //StEpSimuJet(const TLorentzVector& fourMomentum);

    TVector3 momentum() const;
    TLorentzVector fourMomentum() const;

    // Declare Setters
    void setRadius(Double_t rad);
    void setNumParticles(Double_t part);
    //void setArea(Double_t area);
    //void setRt(float rt);
    //void setDetEta(float detEta);
    //void setSameSide(bool sameSide);
    //void setTrig(short trig);

    // Declare and Implement Getters
    Double_t pt()                const { return mPt; }
    Double_t eta()               const { return mEta; }
    Double_t phi()               const { return mPhi; }
    Double_t E()                 const { return mE; }
    Double_t radius()            const { return mRadius; }
    Double_t numberOfParticles() const { return mParticles; }
    //Double_t area()       const { return mArea; }

    Double_t rap();
    
    // Declare Utility Functions
    //Double_t sumParticlePt() const;
    //Double_t sumParticlePt(Double_t radius) const;
    //float sumTowerPt() const;
    //float sumTowerPt(float radius) const;
    //float sumPt() const { return sumTrackPt() + sumTowerPt(); }
    //float sumPt(float radius) const { return sumTrackPt(radius)+sumTowerPt(radius); }
    //Double_t profile(Double_t radius) const { return sumParticlePt(radius)/sumParticlePt(); }
    //float psi(float radius) const { return profile(radius); }
    //float deltaR(const StEpSimuJetParticle* part) const { return momentum().DeltaR(part->momentum()); }
    //Double_t deltaR(const StEpSimuJetParticle* part) const;
    //float deltaR(const StForwardTower* tower) const { return momentum().DeltaR(tower->momentum()); }


    // Set Parent Jet
    void setParentJet(const StEpSimuJet* jet); //{ mDijet = (TObject*)dijet; }

    // Get Number of Particles
    //int numberOfJetParticles() const; // { return mTracks.GetEntriesFast(); }

    // Get Track / Tower
    //StEpSimuJetParticle* jetParticle(int i) const; // { return (StForwardTrack*)mTracks.At(i); }
    //StForwardTower* tower(int i) const;

    // Add Track / Tower to Jet
    //StEpSimuJetParticle* addJetParticle(StEpSimuJetParticle* particle); // { mTracks.Add((TObject*)track); return (StForwardTrack*)mTracks.Last(); }
    //StForwardTower* addTower(StForwardTower* tower);

 private:

    TRef mParentJets;

    Double_t mPt;
    Double_t mEta;
    Double_t mPhi;
    Double_t mE;
    //Double_t mArea;
    Double_t mRadius;
    Double_t mParticles;

    //TRefArray mJetParticles;

    ClassDef(StEpSimuSubJet,2);
};


inline TVector3 StEpSimuSubJet::momentum() const
{
  TVector3 mom;
  mom.SetPtEtaPhi(mPt,mEta,mPhi);
  return mom;
}

inline TLorentzVector StEpSimuSubJet::fourMomentum() const
{
  TLorentzVector fourMom;
  fourMom.SetPtEtaPhiE(mPt,mEta,mPhi,mE);
  return fourMom;
}

#endif
