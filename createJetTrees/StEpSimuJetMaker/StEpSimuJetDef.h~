// Test of Dijet Used with StForwardDijetEvent

#ifndef StEpSimuJetDef_def
#define StEpSimuJetDef_def

#include "TObject.h"
#include "TRefArray.h"
#include "TVector3.h"

class StEpSimuJetEvent;
class StEpSimuJet;

class StEpSimuJetDef : public TObject {
 public:

  StEpSimuJetDef();

  enum ALGO { AKT, KT };
  enum FRAME { BEAM, GAMMA, BREIT};

  // Declare Setters
  //void setTrigCombo(short trig);
  //void setMass(float mass);
  //void setVertex(TVector3 vertex);

  void setRadius(float rad);
  void setMinPt(float pt);
  void setAlgo(int algo);
  void setFrame(int frame);

  // Declare and Implement Getters
  float radius() const { return mRadius; }
  float minPt() const { return mMinPt; }
  int algo() const { return mALGO; }
  int frame() const { return mFRAME; }

  /*
  int   trigCombo()  const { return mTrigCombo; }
  float mass()    const { return mMass; }

  float cosPhiDiff() const;
  float ptBalance() const;
  float etaSum() const;
  float etaDiff() const;
  float x1Calc() const;
  float x2Calc() const;
  float cosTheta() const;
  float vertX()    const { return mVertexX; }
  float vertY()    const { return mVertexY; }
  float vertZ()    const { return mVertexZ; }
  */

  //int numberOfJets() const { return mJets.GetEntriesFast(); }
  // Get Number of Jets
  int numberOfJets() const;

  // Get Jet
  StEpSimuJet* jet(int i) const; //{ return (StForwardJet*)mJets.At(i); }
  //StForwardJet* sameSide() const;
  //StForwardJet* awaySide() const;

  // Add Jet to Dijet
  StEpSimuJet* addJet(StEpSimuJet* jet); //{ mJets.Add((TObject*)jet); return (StForwardJet*)mJets.Last(); }
  
 private:

  float mRadius;
  float mMinPt;
  int mALGO;
  int mFRAME;
  //short mTrigCombo;
  //float mMass;
  //float mVertexX, mVertexY, mVertexZ;

  TRefArray mJets;
  
  ClassDef(StEpSimuJetDef,2);
};

#endif
